public void updatePurgeConfig(String id, PurgeConfigurationObj updatedPurgeConfig) {
    Optional<ArchPurgeConfiguration> entity = this.purgeRepo.findById(Long.valueOf(id));
    if (entity.isPresent()) {
        ArchPurgeConfiguration existingEntity = entity.get();
        existingEntity.setPurgeTableName(updatedPurgeConfig.getPurgeTableName());
        existingEntity.setPurgeColumnName(updatedPurgeConfig.getPurgeColumnName());
        existingEntity.setTableType(updatedPurgeConfig.getTableType());
        existingEntity.setPurgeMessage(updatedPurgeConfig.getPurgeMessage());
        existingEntity.setRetentionMonths(updatedPurgeConfig.getRetentionMonths());

        this.purgeRepo.saveAndFlush(existingEntity);
    } else {
        log.error("Configuration data not found for update: ID {}", id);
        throw new PurgeConfigNotFoundException("Configuration data not found for ID: " + id);
    }
}




public class PurgeConfigNotFoundException extends RuntimeException {
    public PurgeConfigNotFoundException(String message) {
        super(message);
    }
}

public class DataMismatchException extends RuntimeException {
    public DataMismatchException(String message) {
        super(message);
    }
}




@ExceptionHandler(PurgeConfigNotFoundException.class)
public ResponseEntity<Object> handlePurgeConfigNotFoundException(PurgeConfigNotFoundException ex) {
    logger.error("Purge Config Not Found: " + ex.getMessage());
    HttpStatus httpStatus = HttpStatus.NOT_FOUND;
    AdditionalStatus additionalStatus = new AdditionalStatus(httpStatus.value(), AdditionalSeverity.Error);
    additionalStatus.setServerStatusCode(httpStatus.getReasonPhrase());
    additionalStatus.setStatusDesc(ex.getMessage());
    Status apiStatus = new Status(httpStatus.name(), Severity.Error, additionalStatus);
    ApiError apiError = new ApiError(apiStatus);
    return new ResponseEntity<>(apiError, new HttpHeaders(), httpStatus);
}

@ExceptionHandler(DataMismatchException.class)
public ResponseEntity<Object> handleDataMismatchException(DataMismatchException ex) {
    logger.error("Data mismatch error: " + ex.getMessage());
    HttpStatus httpStatus = HttpStatus.BAD_REQUEST;
    AdditionalStatus additionalStatus = new AdditionalStatus(httpStatus.value(), AdditionalSeverity.Error);
    additionalStatus.setServerStatusCode(httpStatus.getReasonPhrase());
    additionalStatus.setStatusDesc(ex.getMessage());
    Status apiStatus = new Status(httpStatus.name(), Severity.Error, additionalStatus);
    ApiError apiError = new ApiError(apiStatus);
    return new ResponseEntity<>(apiError, new HttpHeaders(), httpStatus);
}
