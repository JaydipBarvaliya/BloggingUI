package com.td.besig.opsapi.controller;

import com.td.besig.opsapi.exception.GlobalExceptionHandler;
import com.td.coreapi.common.status.ApiError;
import com.td.esig.common.util.Severity;
import com.td.esig.common.util.SharedServiceLayerException;
import com.td.esig.common.util.Status;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class GlobalExceptionHandlerTest {

    private GlobalExceptionHandler exceptionHandler;

    @BeforeEach
    void setUp() {
        exceptionHandler = new GlobalExceptionHandler();
    }

    @Test
    void testHandleSharedServiceLayerException_ShouldReturnCorrectResponse() {
        // Arrange
        Status mockStatus = mock(Status.class);
        when(mockStatus.getStatusCode()).thenReturn("400");
        when(mockStatus.getSeverity()).thenReturn(Severity.Error);

        SharedServiceLayerException mockException = mock(SharedServiceLayerException.class);
        when(mockException.getMessage()).thenReturn("Mock SharedServiceLayerException");
        when(mockException.getStatus()).thenReturn(mockStatus);

        // Act
        ResponseEntity<Object> responseEntity = exceptionHandler.handleSharedServiceLayerException(mockException);

        // Assert
        assertNotNull(responseEntity);
        assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode()); // Expecting 400 Bad Request
        assertTrue(responseEntity.getBody() instanceof ApiError);

        ApiError apiError = (ApiError) responseEntity.getBody();
        assertNotNull(apiError);
        assertEquals("Error", apiError.getStatus().getSeverity().name());
    }

    @Test
    void testHandleGeneralException_ShouldReturnInternalServerError() {
        // Act
        ResponseEntity<Object> responseEntity = exceptionHandler.handleGeneralException();

        // Assert
        assertNotNull(responseEntity);
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, responseEntity.getStatusCode());
        assertTrue(responseEntity.getBody() instanceof ApiError);

        ApiError apiError = (ApiError) responseEntity.getBody();
        assertNotNull(apiError);
        assertEquals("Error", apiError.getStatus().getSeverity().name()); // Fix assertion
    }
}