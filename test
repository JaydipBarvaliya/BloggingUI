import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doThrow;

public class ConfigurationApiDelegateImplTest {

    @InjectMocks
    private ConfigurationApiDelegateImpl configurationApiDelegate;

    @Mock
    private ConfigurationOpsApiService besigopsApiService;

    @Mock
    private BesigopsapiUtil besigopsapiUtil;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void createConfiguration_ShouldThrowIllegalArgumentException() {
        ConfigurationObj configObj = new ConfigurationObj();

        doThrow(new IllegalArgumentException("Invalid argument"))
                .when(besigopsApiService).createConfig(any());

        IllegalArgumentException thrown = Assertions.assertThrows(
                IllegalArgumentException.class,
                () -> configurationApiDelegate.createConfiguration(configObj)
        );

        Assertions.assertEquals("Invalid argument", thrown.getMessage());
    }

    @Test
    public void createConfiguration_ShouldThrowIllegalStateException() {
        ConfigurationObj configObj = new ConfigurationObj();

        doThrow(new IllegalStateException("Invalid state"))
                .when(besigopsApiService).createConfig(any());

        IllegalStateException thrown = Assertions.assertThrows(
                IllegalStateException.class,
                () -> configurationApiDelegate.createConfiguration(configObj)
        );

        Assertions.assertEquals("Invalid state", thrown.getMessage());
    }

    @Test
    public void createConfiguration_ShouldThrowSharedServiceLayerException() {
        ConfigurationObj configObj = new ConfigurationObj();

        doThrow(new RuntimeException("Unexpected error"))
                .when(besigopsApiService).createConfig(any());

        SharedServiceLayerException thrown = Assertions.assertThrows(
                SharedServiceLayerException.class,
                () -> configurationApiDelegate.createConfiguration(configObj)
        );

        Assertions.assertTrue(thrown.getMessage().contains("Unexpected error"));
    }
}