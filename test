@ControllerAdvice
public class GlobalExceptionHandler extends ResponseEntityExceptionHandler {

  @ExceptionHandler(SharedServiceLayerException.class)
  public ResponseEntity<Object> handleSharedServiceLayerException(SharedServiceLayerException ex) {
    logger.error("SharedService Exception raised by underlying API: {}", ex.getMessage(), ex);
    int statusCode = extractStatusCode(ex);
    return buildErrorResponse(HttpStatus.valueOf(statusCode), ex.getMessage());
  }

  private int extractStatusCode(SharedServiceLayerException ex) {
    try {
      String strStatusCode = ex.getStatus().getServerStatusCode();
      return (strStatusCode.isEmpty() || strStatusCode.contains("DAL-") || strStatusCode.contains("GENERAL-")) 
             ? HttpStatus.INTERNAL_SERVER_ERROR.value() 
             : Integer.parseInt(strStatusCode);
    } catch (Exception e) {
      logger.warn("Failed to extract status code from SharedServiceLayerException, defaulting to 500", e);
      return HttpStatus.INTERNAL_SERVER_ERROR.value();
    }
  }

  @ExceptionHandler(IllegalArgumentException.class)
  public ResponseEntity<Object> handleIllegalArgumentException(IllegalArgumentException ex) {
    return buildErrorResponse(HttpStatus.BAD_REQUEST, ex.getMessage());
  }

  @ExceptionHandler(NoSuchElementException.class)
  public ResponseEntity<Object> handleNoSuchElementException(NoSuchElementException ex) {
    return buildErrorResponse(HttpStatus.NOT_FOUND, ex.getMessage());
  }

  @ExceptionHandler(IllegalStateException.class)
  public ResponseEntity<Object> handleIllegalStateException(IllegalStateException ex) {
    return buildErrorResponse(HttpStatus.BAD_REQUEST, ex.getMessage());
  }

  @ExceptionHandler(PurgeConfigException.class)
  public ResponseEntity<Object> handlePurgeConfigException(PurgeConfigException ex) {
    return buildErrorResponse(ex.getStatus(), ex.getMessage());
  }

  @ExceptionHandler(Exception.class)
  public ResponseEntity<Object> handleGeneralException(Exception ex) {
    return buildErrorResponse(HttpStatus.INTERNAL_SERVER_ERROR, "An unexpected error occurred.");
  }

  private ResponseEntity<Object> buildErrorResponse(HttpStatus status, String message) {
    AdditionalStatus additionalStatus = new AdditionalStatus(status.value(), AdditionalSeverity.Error);
    additionalStatus.setServerStatusCode(status.getReasonPhrase());
    additionalStatus.setStatusDesc(message);
    Status apiStatus = new Status(status.name(), Severity.Error, additionalStatus);
    ApiError apiError = new ApiError(apiStatus);
    return new ResponseEntity<>(apiError, new HttpHeaders(), status);
  }
}
