@ExtendWith(MockitoExtension.class)
class ArchivalFilenetConfigServiceTest {

    @Mock
    private FilenetConfigRepository filenetConfigRepository;

    @InjectMocks
    private ArchivalFilenetConfigService service;

    @Test
    void testDeleteArchivalFileNetConfig_success() {
        String id = "1";
        ArchivalFileNetConfigObj input = new ArchivalFileNetConfigObj();
        input.setLobId("LOB1");
        input.setStorageType("FILENET");

        ArchFilenetConfig entity = new ArchFilenetConfig();
        entity.setLob("LOB1");
        entity.setStorage("FILENET");

        when(filenetConfigRepository.findById(1L)).thenReturn(Optional.of(entity));

        service.deleteArchivalFileNetConfig(id, input);

        verify(filenetConfigRepository).deleteById(1L);
    }

    @Test
    void testDeleteArchivalFileNetConfig_notFound() {
        String id = "2";
        ArchivalFileNetConfigObj input = new ArchivalFileNetConfigObj();

        when(filenetConfigRepository.findById(2L)).thenReturn(Optional.empty());

        assertThrows(NoSuchElementException.class, () -> service.deleteArchivalFileNetConfig(id, input));
    }

    @Test
    void testDeleteArchivalFileNetConfig_mismatch() {
        String id = "3";
        ArchivalFileNetConfigObj input = new ArchivalFileNetConfigObj();
        input.setLobId("LOB1");
        input.setStorageType("S3");

        ArchFilenetConfig entity = new ArchFilenetConfig();
        entity.setLob("LOB1");
        entity.setStorage("FILENET");

        when(filenetConfigRepository.findById(3L)).thenReturn(Optional.of(entity));

        assertThrows(IllegalStateException.class, () -> service.deleteArchivalFileNetConfig(id, input));
    }
}