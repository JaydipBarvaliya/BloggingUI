package com.td.besig.opsapi.delegate;

import com.td.besig.openapi.model.PurgeConfigurationObj;
import com.td.besig.openapi.model.SearchPurgeConfig200Response;
import com.td.besig.opsapi.service.ArchivalApiPurgeConfigService;
import com.td.besig.opsapi.util.BesigopsapiUtil;
import com.td.esig.common.util.SharedServiceLayerException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.ResponseEntity;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.Collections;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;
import static org.springframework.http.HttpStatus.*;

@ExtendWith(MockitoExtension.class)
class ArchivalApiPurgeConfigDelegateImplTest {

    @Mock
    private ArchivalApiPurgeConfigService purgeService;

    @Mock
    private BesigopsapiUtil besigopsapiUtil;

    @Mock
    private NativeWebRequest request;

    @InjectMocks
    private ArchivalApiPurgeConfigDelegateImpl delegate;

    private PurgeConfigurationObj testConfig;

    @BeforeEach
    void setUp() {
        testConfig = new PurgeConfigurationObj();
        testConfig.setId("123");
    }

    @Test
    void testCreatePurgeConfig_Success() {
        when(purgeService.createConfiguration(any())).thenReturn(testConfig);

        ResponseEntity<List<PurgeConfigurationObj>> response = delegate.createPurgeConfig(testConfig);

        assertNotNull(response);
        assertEquals(OK, response.getStatusCode());
        assertEquals(1, response.getBody().size());
        assertEquals("123", response.getBody().get(0).getId());

        verify(purgeService, times(1)).createConfiguration(any());
    }

    @Test
    void testCreatePurgeConfig_Exception() {
        when(purgeService.createConfiguration(any())).thenThrow(new RuntimeException("Error occurred"));

        Exception exception = assertThrows(SharedServiceLayerException.class, () -> delegate.createPurgeConfig(testConfig));

        assertTrue(exception.getMessage().contains("Error occurred"));
    }

    @Test
    void testSearchPurgeConfig_Success() {
        when(purgeService.searchPurgeConfig("testTable")).thenReturn(Collections.singletonList(testConfig));

        ResponseEntity<SearchPurgeConfig200Response> response = delegate.searchPurgeConfig("testTable");

        assertNotNull(response);
        assertEquals(OK, response.getStatusCode());
        assertEquals(1, response.getBody().getCount());
    }

    @Test
    void testGetPurgeConfig_Success() {
        when(purgeService.getPurgeConfig("123")).thenReturn(testConfig);

        ResponseEntity<PurgeConfigurationObj> response = delegate.getPurgeConfig("123");

        assertNotNull(response);
        assertEquals(OK, response.getStatusCode());
        assertEquals("123", response.getBody().getId());
    }

    @Test
    void testGetPurgeConfig_NotFound() {
        when(purgeService.getPurgeConfig("123")).thenReturn(null);

        ResponseEntity<PurgeConfigurationObj> response = delegate.getPurgeConfig("123");

        assertEquals(NOT_FOUND, response.getStatusCode());
    }

    @Test
    void testUpdatePurgeConfig_Success() {
        doNothing().when(purgeService).updatePurgeConfig(eq("123"), any());

        ResponseEntity<Void> response = delegate.updatePurgeConfig("123", testConfig);

        assertEquals(OK, response.getStatusCode());
        verify(purgeService, times(1)).updatePurgeConfig(eq("123"), any());
    }

    @Test
    void testDeletePurgeConfig_Success() {
        doNothing().when(purgeService).deletePurgeConfig(eq("123"), any());

        ResponseEntity<Void> response = delegate.deletePurgeConfig("123", testConfig);

        assertEquals(OK, response.getStatusCode());
        verify(purgeService, times(1)).deletePurgeConfig(eq("123"), any());
    }
}