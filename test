@ExtendWith(MockitoExtension.class)
public class ClientAppsApiServiceTest {

    @InjectMocks
    private ClientAppsApiService service;

    @Mock
    private ClientAppConfigurationRepository repo;

    private ClientAppsObj deletionObj;
    private ClientAppConfiguration config;

    @BeforeEach
    void setUp() {
        deletionObj = new ClientAppsObj();
        deletionObj.setLobId("LOB1");
        deletionObj.setClientId("CLIENT1");

        config = new ClientAppConfiguration();
        config.setLob("LOB1");
        config.setClientId("CLIENT1");
    }

    @Test
    void testDeleteClientApps_success() {
        when(repo.findById(1L)).thenReturn(Optional.of(config));

        service.deleteClientApps("1", deletionObj);

        verify(repo).deleteById(1L);
    }

    @Test
    void testDeleteClientApps_noSuchElement() {
        when(repo.findById(1L)).thenReturn(Optional.empty());

        NoSuchElementException ex = assertThrows(
            NoSuchElementException.class,
            () -> service.deleteClientApps("1", deletionObj)
        );

        assertEquals("Data not available to delete for ID:1", ex.getMessage());
    }

    @Test
    void testDeleteClientApps_illegalState_mismatchLobId() {
        config.setLob("DIFFERENT_LOB"); // mismatch here
        when(repo.findById(1L)).thenReturn(Optional.of(config));

        IllegalStateException ex = assertThrows(
            IllegalStateException.class,
            () -> service.deleteClientApps("1", deletionObj)
        );

        assertTrue(ex.getMessage().contains("Data mismatch in lobId"));
    }

    @Test
    void testDeleteClientApps_illegalState_mismatchClientId() {
        config.setClientId("DIFFERENT_CLIENT"); // mismatch here
        when(repo.findById(1L)).thenReturn(Optional.of(config));

        IllegalStateException ex = assertThrows(
            IllegalStateException.class,
            () -> service.deleteClientApps("1", deletionObj)
        );

        assertTrue(ex.getMessage().contains("Data mismatch in clientId"));
    }
}