@ExtendWith(MockitoExtension.class)
public class ClientAppsApiServiceTest {

    @InjectMocks
    @Spy // <-- Add this
    private ClientAppsApiService clientAppsApiService;

    @Mock
    private ClientAppConfigurationRepository repo;

    @Test
    public void getClientAppConfigListWithDataTest() {
        // Prepare test data
        ClientAppConfiguration clientAppConfiguration = new ClientAppConfiguration();
        clientAppConfiguration.setClientId("TestClient");
        clientAppConfiguration.setLob("TestLob");

        List<ClientAppConfiguration> configList = new ArrayList<>();
        configList.add(clientAppConfiguration);

        Specification<ClientAppConfiguration> spec =
            ClientAppConfigSpecifications.dynamicQuery("TestLob", "TestClient");

        ClientAppsObj dto = new ClientAppsObj(); // mocked DTO

        // Mocking
        when(repo.findAll(spec)).thenReturn(configList);
        doReturn(dto).when(clientAppsApiService).entityToDto(clientAppConfiguration); // spy method

        // Call method under test
        List<ClientAppsObj> result =
            clientAppsApiService.getClientAppConfigList("TestLob", "TestClient");

        // Assertions
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals(dto, result.get(0));
    }
}