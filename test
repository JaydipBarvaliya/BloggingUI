public static int minRetailersToRelocate(List<Integer> regionStart, List<Integer> regionEnd) {
    int n = regionStart.size();

    int[][] intervals = new int[n][2];
    for (int i = 0; i < n; i++) {
        intervals[i][0] = regionStart.get(i);
        intervals[i][1] = regionEnd.get(i);
    }

    // Convert to sweep events: (point, +1 or -1)
    List<int[]> events = new ArrayList<>();
    for (int[] interval : intervals) {
        events.add(new int[]{interval[0], 1});              // start of interval
        events.add(new int[]{interval[1] + 1, -1});         // end + 1 for inclusivity
    }

    // Sort events by point, and if equal, -1 before +1
    events.sort((a, b) -> {
        if (a[0] != b[0]) return Integer.compare(a[0], b[0]);
        return Integer.compare(a[1], b[1]);
    });

    int active = 0, maxOverlap = 0;
    for (int[] event : events) {
        active += event[1];
        maxOverlap = Math.max(maxOverlap, active);
    }

    return n - maxOverlap;
}