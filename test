public static int minRetailersToRelocate(List<Integer> regionStart, List<Integer> regionEnd) {
    int n = regionStart.size();
    int[][] intervals = new int[n][2];

    for (int i = 0; i < n; i++) {
        intervals[i][0] = regionStart.get(i);
        intervals[i][1] = regionEnd.get(i);
    }

    // Sort by start time
    Arrays.sort(intervals, Comparator.comparingInt(a -> a[0]));

    // Min heap to store end times
    PriorityQueue<Integer> minHeap = new PriorityQueue<>();
    int maxInclusiveGroup = 0;

    for (int[] interval : intervals) {
        int start = interval[0], end = interval[1];

        // Remove intervals that do not overlap
        while (!minHeap.isEmpty() && minHeap.peek() < start) {
            minHeap.poll();
        }

        minHeap.offer(end);
        maxInclusiveGroup = Math.max(maxInclusiveGroup, minHeap.size());
    }

    return n - maxInclusiveGroup;
}