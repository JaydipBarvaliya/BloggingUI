import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class ArchivalApiMetadataServiceTest {

    @Mock
    private MetaRepository metaRepo;  // Mock the repository

    @InjectMocks
    private ArchivalApiMetadataService archivalApiMetadataService; // Class under test

    @Test
    void testDeleteArchivalMetadataMapping_SuccessfulDeletion() throws Exception {
        // Given: Mocked database entity
        String id = "123";
        ArchMetadataMapping entity = new ArchMetadataMapping();
        entity.setMapType("Type1");
        entity.setArcKey("Key1");
        entity.setArcDescription("Description1");
        entity.setArcValue("Value1");

        // Given: Deletion metadata (matching entity attributes)
        ArchivalMetadataMappingObj deletionMetadata = new ArchivalMetadataMappingObj("Type1", "Key1", "Description1", "Value1");

        // Mock repository to return the entity when searched by ID
        when(metaRepo.findById(Long.valueOf(id))).thenReturn(Optional.of(entity));

        // When: Calling delete method
        assertDoesNotThrow(() -> archivalApiMetadataService.deleteArchivalMetadataMapping(id, deletionMetadata));

        // Then: Verify that deleteById was called
        verify(metaRepo, times(1)).deleteById(Long.valueOf(id));
    }
}