@ExtendWith(MockitoExtension.class)
class ArchStaticMetaDataSpecTest {

    @Mock
    private Root<ArchStaticMetadataLookup> root;

    @Mock
    private CriteriaQuery<?> query;

    @Mock
    private CriteriaBuilder cb;

    @Mock
    private Predicate predicate;

    @Mock
    private Path<String> path;

    @Test
    void test_dynamicQuery_withNullLookupId() {
        // Arrange
        when(cb.conjunction()).thenReturn(predicate);

        // Act
        Specification<ArchStaticMetadataLookup> spec = ArchStaticMetaDataSpec.dynamicQuery(null);
        Predicate result = spec.toPredicate(root, query, cb);

        // Assert
        assertEquals(predicate, result); // only the conjunction is returned
        verify(cb).conjunction();
        verifyNoMoreInteractions(cb); // ensure 'equal' is not called
    }

    @Test
    void test_dynamicQuery_withNonNullLookupId() {
        String lookupId = "LKP001";

        Predicate conjunction = mock(Predicate.class);
        Predicate equalPredicate = mock(Predicate.class);
        Predicate finalPredicate = mock(Predicate.class);

        // Arrange
        when(cb.conjunction()).thenReturn(conjunction);
        when(root.get("LOOKUP_ID")).thenReturn(path);
        when(cb.equal(path, lookupId)).thenReturn(equalPredicate);
        when(cb.and(conjunction, equalPredicate)).thenReturn(finalPredicate);

        // Act
        Specification<ArchStaticMetadataLookup> spec = ArchStaticMetaDataSpec.dynamicQuery(lookupId);
        Predicate result = spec.toPredicate(root, query, cb);

        // Assert
        assertEquals(finalPredicate, result);
    }
}