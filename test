package com.td.besig.opsapi.delegate;

import com.td.besig.openapi.api.ConfigurationApiDelegate;
import com.td.besig.openapi.model.*;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Primary;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Primary
@Service
@RequiredArgsConstructor
public class CompositeConfigurationApiDelegate implements ConfigurationApiDelegate {

    private final ConfigurationApiDelegateImpl configurationApiDelegate;
    private final PurgeApiConfigDelegateImpl purgeApiConfigDelegate;

    // Configuration endpoints delegation
    @Override
    public ResponseEntity<ConfigurationObj> createConfiguration(ConfigurationObj configurationObj) {
        return configurationApiDelegate.createConfiguration(configurationObj);
    }

    @Override
    public ResponseEntity<Void> deleteConfiguration(String id, ConfigurationObj configurationObj) {
        return configurationApiDelegate.deleteConfiguration(id, configurationObj);
    }

    @Override
    public ResponseEntity<ConfigurationObj> getConfiguration(String id) {
        return configurationApiDelegate.getConfiguration(id);
    }

    @Override
    public ResponseEntity<SearchConfiguration200Response> searchConfiguration(String appId, String lobId, String name) {
        return configurationApiDelegate.searchConfiguration(appId, lobId, name);
    }

    @Override
    public ResponseEntity<Void> updateConfiguration(String id, ConfigurationObj configurationObj) {
        return configurationApiDelegate.updateConfiguration(id, configurationObj);
    }

    // Purge endpoints delegation
    @Override
    public ResponseEntity<List<PurgeConfigurationObj>> createPurgeConfig(PurgeConfigurationObj purgeConfigurationObj) {
        return purgeApiConfigDelegate.createPurgeConfig(purgeConfigurationObj);
    }

    @Override
    public ResponseEntity<SearchPurgeConfig200Response> searchPurgeConfig(String purgeTableName) {
        return purgeApiConfigDelegate.searchPurgeConfig(purgeTableName);
    }

    @Override
    public ResponseEntity<PurgeConfigurationObj> getPurgeConfig(String id) {
        return purgeApiConfigDelegate.getPurgeConfig(id);
    }

    @Override
    public ResponseEntity<Void> updatePurgeConfig(String id, PurgeConfigurationObj purgeConfigurationObj) {
        return purgeApiConfigDelegate.updatePurgeConfig(id, purgeConfigurationObj);
    }

    @Override
    public ResponseEntity<Void> deletePurgeConfig(String id, PurgeConfigurationObj purgeConfigurationObj) {
        return purgeApiConfigDelegate.deletePurgeConfig(id, purgeConfigurationObj);
    }

    @Override
    public Optional<org.springframework.web.context.request.NativeWebRequest> getRequest() {
        return configurationApiDelegate.getRequest(); // or purgeApiConfigDelegate.getRequest()
    }
}