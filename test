@Test
public void createNPID_ShouldThrowIllegalArgumentException() {
    NPIDObj npidObj = new NPIDObj();

    doThrow(new IllegalArgumentException("Invalid input"))
        .when(esignNpidOpsApiService).createNPIDEntry(any());

    IllegalArgumentException thrown = Assertions.assertThrows(
        IllegalArgumentException.class,
        () -> npidApiDelegate.createNPID(npidObj)
    );

    Assertions.assertEquals("Invalid input", thrown.getMessage());
}

@Test
public void createNPID_ShouldThrowIllegalStateException() {
    NPIDObj npidObj = new NPIDObj();

    doThrow(new IllegalStateException("Illegal state"))
        .when(esignNpidOpsApiService).createNPIDEntry(any());

    IllegalStateException thrown = Assertions.assertThrows(
        IllegalStateException.class,
        () -> npidApiDelegate.createNPID(npidObj)
    );

    Assertions.assertEquals("Illegal state", thrown.getMessage());
}

@Test
public void createNPID_ShouldThrowSharedServiceLayerException() {
    NPIDObj npidObj = new NPIDObj();

    doThrow(new RuntimeException("Unexpected"))
        .when(esignNpidOpsApiService).createNPIDEntry(any());

    SharedServiceLayerException thrown = Assertions.assertThrows(
        SharedServiceLayerException.class,
        () -> npidApiDelegate.createNPID(npidObj)
    );

    Assertions.assertTrue(thrown.getMessage().contains("Unexpected"));
}

@Test
public void deleteNPID_ShouldThrowNoSuchElementException() {
    String userId = "user123";

    doThrow(new NoSuchElementException("Not found"))
        .when(esignNpidOpsApiService).deleteNPID(any());

    NoSuchElementException thrown = Assertions.assertThrows(
        NoSuchElementException.class,
        () -> npidApiDelegate.deleteNPID(userId)
    );

    Assertions.assertEquals("Not found", thrown.getMessage());
}

@Test
public void deleteNPID_ShouldThrowIllegalStateException() {
    String userId = "user123";

    doThrow(new IllegalStateException("Invalid state"))
        .when(esignNpidOpsApiService).deleteNPID(any());

    IllegalStateException thrown = Assertions.assertThrows(
        IllegalStateException.class,
        () -> npidApiDelegate.deleteNPID(userId)
    );

    Assertions.assertEquals("Invalid state", thrown.getMessage());
}

@Test
public void deleteNPID_ShouldThrowSharedServiceLayerException() {
    String userId = "user123";

    doThrow(new RuntimeException("Unexpected"))
        .when(esignNpidOpsApiService).deleteNPID(any());

    SharedServiceLayerException thrown = Assertions.assertThrows(
        SharedServiceLayerException.class,
        () -> npidApiDelegate.deleteNPID(userId)
    );

    Assertions.assertTrue(thrown.getMessage().contains("Unexpected"));
}

@Test
public void updateNPID_ShouldThrowNoSuchElementException() {
    String userId = "user123";
    NPIDObj npidObj = new NPIDObj();

    doThrow(new NoSuchElementException("Missing entry"))
        .when(esignNpidOpsApiService).updateNPIDEntry(any(), any());

    NoSuchElementException thrown = Assertions.assertThrows(
        NoSuchElementException.class,
        () -> npidApiDelegate.updateNPID(userId, npidObj)
    );

    Assertions.assertEquals("Missing entry", thrown.getMessage());
}

@Test
public void updateNPID_ShouldThrowSharedServiceLayerException() {
    String userId = "user123";
    NPIDObj npidObj = new NPIDObj();

    doThrow(new RuntimeException("Unexpected error"))
        .when(esignNpidOpsApiService).updateNPIDEntry(any(), any());

    SharedServiceLayerException thrown = Assertions.assertThrows(
        SharedServiceLayerException.class,
        () -> npidApiDelegate.updateNPID(userId, npidObj)
    );

    Assertions.assertTrue(thrown.getMessage().contains("Unexpected error"));
}