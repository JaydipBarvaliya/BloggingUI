@Test
void testEntityToDto_ValidInput() {
    // Create a valid entity
    ArchPurgeConfiguration entity = new ArchPurgeConfiguration();
    entity.setId(1L);
    entity.setPurgeTableName("testTable");

    // Create a mock DTO
    ArchPurgeConfigurationDto mockDto = new ArchPurgeConfigurationDto();
    mockDto.setId(1L);

    // Spy on the actual mapper instance
    EntityToDTOMapper mapperSpy = spy(EntityToDTOMapper.INSTANCE);
    doReturn(mockDto).when(mapperSpy).toDto(any(ArchPurgeConfiguration.class));

    // Spy on the secondary object mapper
    ArchPurgeConfigObjToDtoMapper objMapperSpy = spy(ArchPurgeConfigObjToDtoMapper.MAPPER);
    PurgeConfigurationObj mockConfigObj = new PurgeConfigurationObj();
    doReturn(mockConfigObj).when(objMapperSpy).dtoToConfig(any(ArchPurgeConfigurationDto.class));

    // Inject the spy using reflection (if needed)
    ArchivalApiPurgeConfigService purgeServiceSpy = spy(new ArchivalApiPurgeConfigService(null));
    doReturn(mockDto).when(mapperSpy).toDto(entity);
    doReturn(mockConfigObj).when(objMapperSpy).dtoToConfig(mockDto);

    // Call the method
    PurgeConfigurationObj result = purgeServiceSpy.entityToDto(entity);

    // Assertions
    assertNotNull(result);
    verify(mapperSpy, times(1)).toDto(entity);
    verify(objMapperSpy, times(1)).dtoToConfig(mockDto);
}