@ExtendWith(MockitoExtension.class)
class ArchStaticMetadataServiceTest {

    @InjectMocks
    private ArchStaticMetadataService service;

    @Mock
    private ArchStaticMetadataRepository repo;

    // Success case - all values match
    @Test
    void testDeleteArchivalStaticMetadata_success() {
        String id = "1";
        ArchStaticMetadataLookup entity = new ArchStaticMetadataLookup();
        entity.setLob("LOB1");
        entity.setLookupId("LOOKUP1");
        entity.setArcStorageMetadataField("FieldA");
        entity.setLookupValue("ValueX");
        entity.setArcStorageFieldType("String");

        ArchivalStaticMetadataObj input = new ArchivalStaticMetadataObj();
        input.setLobId("LOB1");
        input.setLookupId("LOOKUP1");
        input.setArcStorageMetadataField("FieldA");
        input.setLookupValue("ValueX");
        input.setArcStorageFieldType("String");

        when(repo.findById(1L)).thenReturn(Optional.of(entity));

        service.deleteArchivalStaticMetadata(id, input);

        verify(repo).deleteById(1L);
    }

    // Record not found
    @Test
    void testDeleteArchivalStaticMetadata_dataNotFound() {
        String id = "2";
        ArchivalStaticMetadataObj input = new ArchivalStaticMetadataObj();

        when(repo.findById(2L)).thenReturn(Optional.empty());

        assertThrows(NoSuchElementException.class, () -> 
            service.deleteArchivalStaticMetadata(id, input)
        );
    }

    // Mismatch found
    @Test
    void testDeleteArchivalStaticMetadata_mismatchDetected() {
        String id = "3";
        ArchStaticMetadataLookup entity = new ArchStaticMetadataLookup();
        entity.setLob("LOB1");
        entity.setLookupId("LOOKUP1");
        entity.setArcStorageMetadataField("FieldA");
        entity.setLookupValue("WrongValue");
        entity.setArcStorageFieldType("String");

        ArchivalStaticMetadataObj input = new ArchivalStaticMetadataObj();
        input.setLobId("LOB1");
        input.setLookupId("LOOKUP1");
        input.setArcStorageMetadataField("FieldA");
        input.setLookupValue("ValueX"); // mismatch here
        input.setArcStorageFieldType("String");

        when(repo.findById(3L)).thenReturn(Optional.of(entity));

        assertThrows(IllegalStateException.class, () -> 
            service.deleteArchivalStaticMetadata(id, input)
        );
    }
}